initSidebarItems({"constant":[["CPU_PAGE_PROPERTY_NOT_AVAILABLE",""],["CPU_PAGE_PROPERTY_UNKNOWN",""],["CPU_PAGE_PROPERTY_WRITE_BACK",""],["CPU_PAGE_PROPERTY_WRITE_COMBINE",""],["HEAP_ALIGNMENT_DEFAULT","alias for 64kb"],["HEAP_ALIGNMENT_DEFAULT_MSAA_RESOURCE_PLACEMENT",""],["HEAP_ALIGNMENT_DEFAULT_RESOURCE_PLACEMENT",""],["HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES",""],["HEAP_FLAG_ALLOW_DISPLAY","the heap can contain swapchain surfaces"],["HEAP_FLAG_ALLOW_ONLY_BUFFERS",""],["HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES",""],["HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES",""],["HEAP_FLAG_ALLOW_WRITE_WATCH","allow tools to support `MEM_WRITE_WATCH`"],["HEAP_FLAG_DENY_BUFFERS","the heap isn't allowed to contain buffers"],["HEAP_FLAG_DENY_NON_RT_DS_TEXTURES","the heap can't contain textures without `ALLOW_RENDER_TARGET` or `ALLOW_DEPTH_STENCIL` flags"],["HEAP_FLAG_DENY_RT_DS_TEXTURES","the heap can't store render target or depth stencil textures"],["HEAP_FLAG_HARDWARE_PROTECTED","unsupported"],["HEAP_FLAG_NONE",""],["HEAP_FLAG_SHARED","a shared heap"],["HEAP_FLAG_SHARED_CROSS_ADAPTER","the heap can be shored across adapters"],["HEAP_TYPE_CUSTOM",""],["HEAP_TYPE_DEFAULT",""],["HEAP_TYPE_READBACK",""],["HEAP_TYPE_UPLOAD",""],["MEMORY_POOL_L0",""],["MEMORY_POOL_L1",""],["MEMORY_POOL_UNKNOWN",""],["RESOURCE_BARRIER_FLAG_BEGIN_ONLY",""],["RESOURCE_BARRIER_FLAG_END_ONLY",""],["RESOURCE_BARRIER_FLAG_NONE",""],["RESOURCE_DIMENSION_BUFFER",""],["RESOURCE_DIMENSION_TEXTURE1D",""],["RESOURCE_DIMENSION_TEXTURE2D",""],["RESOURCE_DIMENSION_TEXTURE3D",""],["RESOURCE_DIMENSION_UNKNOWN",""],["RESOURCE_FLAG_ALLOW_CROSS_ADAPTER",""],["RESOURCE_FLAG_ALLOW_DEPTH_STENCIL",""],["RESOURCE_FLAG_ALLOW_RENDER_TARGET",""],["RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS",""],["RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS",""],["RESOURCE_FLAG_DENY_SHADER_RESOURCE",""],["RESOURCE_FLAG_NONE",""],["RESOURCE_STATE_COMMON","resource should be in this state when"],["RESOURCE_STATE_COPY_DEST","used as the destination in a copy operation"],["RESOURCE_STATE_COPY_SOURCE","used as the src in a copy operation"],["RESOURCE_STATE_DEPTH_READ","a subresource should be in this state when used for depth read."],["RESOURCE_STATE_DEPTH_WRITE","a subresource should be in this state when used for depth write. mutual exclusive"],["RESOURCE_STATE_GENERIC_READ","required starting state for upload heaps. when in this state, a resource can be accessed for reading from multiple command queues simultaneously."],["RESOURCE_STATE_INDEX_BUFFER","a subresource should be in this state when accessed as a index buffer"],["RESOURCE_STATE_INDIRECT_ARGUMENT","the resource is used as indirect argument"],["RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE","a subresource should be in this state when accessed as a SRV from any stage other than PS"],["RESOURCE_STATE_PIXEL_SHADER_RESOURCE","a subresource should be in this state when accessed as a SRV from PS"],["RESOURCE_STATE_PREDICATION","used for predication"],["RESOURCE_STATE_PRESENT","alias for `COMMON`"],["RESOURCE_STATE_RENDER_TARGET","a subresource should be in this state when used as a render target"],["RESOURCE_STATE_RESOLVE_DEST","used as the destination in a resolve operation"],["RESOURCE_STATE_RESOLVE_SOURCE","used as the src in a resolve operation"],["RESOURCE_STATE_STREAM_OUT","a subresource is used with stream output"],["RESOURCE_STATE_UNORDERED_ACCESS","a subresource should be in this state when accessed via an UAV. when in this state, a resource can be accessed for RW from multiple command queues simultaneously."],["RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER","a subresource should be in this state when accessed as a vertex buffer or constant buffer"],["TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE",""],["TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE",""],["TEXTURE_LAYOUT_ROW_MAJOR","data for the texture is stored in row-major order. only the following texture properties are supported:"],["TEXTURE_LAYOUT_UNKNOWN","adapter-dependent layout. driver choose optimal layout during resource creation"],["USAGE_BACK_BUFFER","resource is used as a back buffer. This flag don't need to be passed when creating a swapchain."],["USAGE_CPU_DYNAMIC","cpu have write only access to this resource "],["USAGE_CPU_NONE","cpu don't have access to this resource"],["USAGE_CPU_READ_WRITE","cpu can read or write this resource"],["USAGE_CPU_SCRATCH","FIXME: wth?"],["USAGE_DISCARD_ON_PRESENT","FIXME: resource content might be discarded after present?"],["USAGE_READ_ONLY","resource is read only for the gpu"],["USAGE_RENDER_TARGET_OUTPUT","resource can be used as render target output"],["USAGE_SHADER_INPUT","resource can be used as shader input"],["USAGE_SHARED","FIXME: resource can be shared across different adapters?"],["USAGE_UNORDERED_ACCESS","resource can be unordered accessed"]],"enum":[["ResourceBarrierType",""],["TextureCopyType",""]],"struct":[["CommittedResource","a committed resource, backed up by an implicit heap"],["GpuVAddress","GPU virtual device"],["Heap","a continous memory region"],["HeapAlignment","heap alignment"],["HeapDesc","description of a heap"],["HeapFlags","misc heap options. more info"],["HeapProperties","describes heap properties"],["HeapType","heap type."],["MemoryPoolPreference","memory pool preference. more info"],["PageProperty","cpu page properties."],["PlacedResource","a placed resource, backed up by an explicit heap"],["PlacedSubresourceFootprint","more info"],["RawResource","a raw resource"],["ResourceAliasingBarrier","describes the transition between usage of two different resources having mappings into the same heap."],["ResourceAllocInfo",""],["ResourceBarrier","resource barriers"],["ResourceBarrierFlags","misc resource barrier flags. more"],["ResourceBarriersBuilder","resource barrier builder"],["ResourceChunkDesc","describes a chunk of resource"],["ResourceDesc","resource description"],["ResourceDimension","dimension i.e. type of the resource"],["ResourceFlags","misc flags for resources. more info"],["ResourceStates","the state of a resource regarding how it is being used. more"],["ResourceTransitionBarrier","represents a transition of subresource between different usages"],["ResourceUavBarrier","describes a barrier in which all uav access to a resource must complete before subsequent uav accesses can begin"],["TextureCopyLocation","describes a resource used for GPU texture copying"],["TextureLayout","texture layout"],["Usage","resource usage flags"]]});