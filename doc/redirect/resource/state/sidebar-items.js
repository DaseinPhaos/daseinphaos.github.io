initSidebarItems({"constant":[["RESOURCE_STATE_COMMON","resource should be in this state when"],["RESOURCE_STATE_COPY_DEST","used as the destination in a copy operation"],["RESOURCE_STATE_COPY_SOURCE","used as the src in a copy operation"],["RESOURCE_STATE_DEPTH_READ","a subresource should be in this state when used for depth read."],["RESOURCE_STATE_DEPTH_WRITE","a subresource should be in this state when used for depth write. mutual exclusive"],["RESOURCE_STATE_GENERIC_READ","required starting state for upload heaps. when in this state, a resource can be accessed for reading from multiple command queues simultaneously."],["RESOURCE_STATE_INDEX_BUFFER","a subresource should be in this state when accessed as a index buffer"],["RESOURCE_STATE_INDIRECT_ARGUMENT","the resource is used as indirect argument"],["RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE","a subresource should be in this state when accessed as a SRV from any stage other than PS"],["RESOURCE_STATE_PIXEL_SHADER_RESOURCE","a subresource should be in this state when accessed as a SRV from PS"],["RESOURCE_STATE_PREDICATION","used for predication"],["RESOURCE_STATE_PRESENT","alias for `COMMON`"],["RESOURCE_STATE_RENDER_TARGET","a subresource should be in this state when used as a render target"],["RESOURCE_STATE_RESOLVE_DEST","used as the destination in a resolve operation"],["RESOURCE_STATE_RESOLVE_SOURCE","used as the src in a resolve operation"],["RESOURCE_STATE_STREAM_OUT","a subresource is used with stream output"],["RESOURCE_STATE_UNORDERED_ACCESS","a subresource should be in this state when accessed via an UAV. when in this state, a resource can be accessed for RW from multiple command queues simultaneously."],["RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER","a subresource should be in this state when accessed as a vertex buffer or constant buffer"]],"struct":[["ResourceStates","the state of a resource regarding how it is being used. more"]]});