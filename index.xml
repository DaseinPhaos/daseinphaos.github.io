<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Burning Ashes</title>
    <link>https://daseinphaos.github.io/index.xml</link>
    <description>Recent content on Burning Ashes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jul 2018 05:35:07 +0800</lastBuildDate>
    <atom:link href="https://daseinphaos.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>重启</title>
      <link>https://daseinphaos.github.io/post/reboot/</link>
      <pubDate>Sun, 29 Jul 2018 05:35:07 +0800</pubDate>
      
      <guid>https://daseinphaos.github.io/post/reboot/</guid>
      <description>&lt;p&gt;写作的起点在哪？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;作为一个接受素质教育的中国大陆人，不难猜到，我的起点，是语文老师布置的习作。&lt;/p&gt;

&lt;p&gt;从小学的第一篇周记开始，贯穿应试教育十二年的作文，既是起点，也——不出预料地——是我坚持时间最长、成文最多的写作项目。&lt;/p&gt;

&lt;p&gt;但它们的内容甚至题目，到今天，我却基本都已经忘了。倒不是说它们重要。正相反，它们——尤其是高中三年写的——奠定了我写作的根基。毕竟最长最多，它们的影响，是我想避都没法避开的。更不用说，我能用得出的所有技法，也都是通过它们而得以系统性学到的。&lt;/p&gt;

&lt;p&gt;忘记的原因也很单纯。作业和试题毕竟是别人布置的任务，再加上任务说明里明确指示了，只要“积极健康”；我作为一个满脑子想着睡觉、上网以及隔壁女同学的健全男学生，自然很难把真正想展示的那些低劣罪恶的想法写进去。但作业总不能不交，试也不能不考， &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:-&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:-&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 那就只能瞎写，假大空的话扯上一堆，扯完也就过去了，自然就忘了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;那有没有还没忘的写作经验呢？&lt;/p&gt;

&lt;p&gt;说实在话，很少。逻辑性强如代码，过六个月，是我自己写的基本上也忘了。我写的其它东西通常又更缺乏逻辑，能记下来的更加少。&lt;/p&gt;

&lt;p&gt;但一些印象总归是留了下来，那些真正因为自己想写才主动去写了的东西。&lt;/p&gt;

&lt;p&gt;最早的印象是初中——不，是小学。当我打下“初中”这两个字时，脑海里浮现出的是一个小孩，正捧着心仪女生的日记。日记本很好看，女生的字更好看。小孩当即想，自己也要去买个一样的本子，也要记日记——模仿他喜欢的女生。思绪到这里突然跳转，一段更早的印象进入视野，小学，也是为了模仿自己喜欢的女生，她们正在写当时流行的交换言情小说，小孩自己就也买了个本子写小说。&lt;/p&gt;

&lt;p&gt;那究竟是什么样的小说呢。现在的我是想不出了。&lt;/p&gt;

&lt;p&gt;女生们的小说本传来传去被班主任发现，发鬓斑白的她翻看了一会儿，竟然没有开始说教，而是抬起头，深吸一口气，然后稍稍舒展出笑容，“写得还挺好的呀！”&lt;/p&gt;

&lt;p&gt;那究竟是什么样的小说呢。&lt;/p&gt;

&lt;p&gt;我现在有点感到诧异，因为自己当时竟然没要求过，要看她们的那本小说。她们当然也没要求看我的——我压根没告诉过她们自己也写。当然啦，几页之后，也许是自己都看不懂了，我就把这整件事忘记，直到刚刚又想起来。&lt;/p&gt;

&lt;p&gt;因为年纪比较小，小学初中时，我一直很受关照。同学们都把我当成弟弟又护又逗，她们也不例外。现在回想的话，我如果主动去要来看，应该也不会被拒绝吧。但当年害怕温暖关系被打破的小胆子小孩，一直都是被动地让交互发生，从来不敢自己主动把心意挑明。可惜给我看小说这个交互事件，终究是没有发生。&lt;/p&gt;

&lt;p&gt;初中的日记本，差不多就是小学情形的再度演绎。我写了一段时间，大概也是没告诉过她，然后就没有然后了。&lt;/p&gt;

&lt;p&gt;也许我只是想接近她们吧。最终，我没能写出什么值得记得的东西；写这事儿本身，也没能成为拉近我和她们之间距离的契机。什么也没有发生。&lt;/p&gt;

&lt;p&gt;直到初中毕业前，我才鼓起勇气，主动给初中阶段自己喜欢的最后一个女生买礼物、打电话。虽然再然后也没有然后了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;日记本后不久，QQ空间开始在我们那儿流行了。网络日志，我记得住内容的，真正的写作起点。&lt;/p&gt;

&lt;p&gt;还是因为看了那位女同学的，给我看日记本的那位。她的空间也很漂亮。不过具体是怎么漂亮法呢？粉色，还是黑色点缀着星星点点的红？我不记得了。只记得自己看过之后，就决心自己也选一个酷炫的模板，然后把网络日志写起来。&lt;/p&gt;

&lt;p&gt;她总归是看过我在空间里写的东西的。网络帮我伸出了自己犹豫着不敢伸出去的邀请的手。当然这邀请的力度要下降了不少，回应的分量相应的也变得难以判断。那个时候，只要是开通了QQ空间的同学，男生女生都会互相来往。&lt;/p&gt;

&lt;p&gt;那么，那时候我写了些什么？&lt;/p&gt;

&lt;p&gt;在某些时间段，回想那些内容应该是非常羞耻的，以至于在大概高一高二前后，我清空了自己所有的QQ日志。&lt;/p&gt;

&lt;p&gt;剧变的青春期，每一天都会打心底觉得，前一天的自己是个傻逼。可能就在那一天，我突然意识到，自己那些关于生活、关于情情爱爱的傻逼看法，参与的那些傻逼点名活动，以及那些被钓鱼发的傻逼贴子，仍然停留在网络上供人瞻仰，是一件非常尴尬的事情。&lt;/p&gt;

&lt;p&gt;这次清洗，让现在正回头考古的我感到难办。我还记得曾有一些自己写或翻译的小诗，它们在清洗中消失了。我的初中生涯在清洗中消失了一部分。向高二的自己提出严正抗议。&lt;/p&gt;

&lt;p&gt;清洗过后，我就很少在QQ空间写日志了。一方面，新兴的人人网抢占了我大部分网络时间；另一方面，我自己也吸取了清洗的教训，变得更加不愿下笔，害怕一不留神又留下更多的黑历史。&lt;/p&gt;

&lt;p&gt;不过终究还是又写了四篇，可供现在的我瞻仰。&lt;/p&gt;

&lt;p&gt;第一篇写在高二下学期，典型的网络日记，流水账，强社交性，说当时外公检查出癌症，我的生活又有诸多不顺，很伤心；然后点名几个当时关系亲密的朋友，说说心里话，然后再自责发泄一下。&lt;/p&gt;

&lt;p&gt;我记得自己写过这篇，但没想到它的社交成分能有这么地强。在现在的我看来，这简直是不可想象的。现在我也发微博、推特，但都是为了我本人的开心和发泄；已经不再把听众的想法纳入考量。&lt;/p&gt;

&lt;p&gt;思考了一会，我觉得应该把这种写作目的转换，归因于听众的消失。初高中时，尽管和亲近的同学们每天都在见面，但一回到家里，总又还能想到更多的事情没能和他们聊完。还有更多虽然暂时没法见面，但是仍然希望能够互相保持联系的前同学。我甚至还有 &lt;strong&gt;真正的&lt;/strong&gt; 网友。&lt;/p&gt;

&lt;p&gt;但不知不觉间，那些亲近的同学、前同学和网友们，渐渐都从我的网路空间里消失了。我的QQ空间凉了，人人网凉了，微博也凉了。但我自己想要谈话的欲望却不像他们走得那样迅速而决绝，仍然不时会从胃里涌起。我只好让它吐出来，流向真空。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;之后三篇QQ日志，发布时间分散在高三下到大一期间。主要描述了自己当时的生活和情绪状态。可以看到它们从高三的顶点到大学直线下行的轨迹。这种下行也是驱动我后来写作的动力之一。&lt;/p&gt;

&lt;p&gt;就在高中毕业、才进入大学那段时间里，我开始突然或者渐渐意识到很多事情没有意义。跟女朋友的热恋甚至也丢失了意义。&lt;/p&gt;

&lt;p&gt;在高中，我的存在目标很明确：考大学。在我的周围，是跟我目标一致，兴趣相投的一众好友。但真到了大学，一切都显得世故而无聊。社团很无聊，我在高中玩过非常棒的；同学很无聊，半点共同话题都谈不拢。课程也很无聊，繁文缛节也很无聊，起床也开始变得很无聊&amp;hellip;&lt;/p&gt;

&lt;p&gt;我不是在控诉大学生活本身不好。我见过的，过得很充实的人生赢家也不少。但出于种种原因——可以认为主要是出于自身摆烂——这种“好的”大学生活，跟我的距离十分遥远。恰恰相反，我陷在无聊、无意义的泥潭里，一年又一年，不去上课，也不去参加考试，可以说是就窝在宿舍里，厮混了五年。我的大学生活就是厮混。&lt;/p&gt;

&lt;p&gt;但我当然不可能满足于厮混。咸鱼可能没有梦想，但总归是会感到恐慌的。有那么一些深夜，我熬到了宿舍断电断网，但仍然睡不着觉，也不知道能干什么转移注意力。恐慌会在这种夜里找上我，一个预备废人，也没有老本可吃，正在泥潭里挣扎的样子。&lt;/p&gt;

&lt;p&gt;有那么一些夜里，我甚至没有人可以倾诉。女朋友早就吹了。亲密朋友们——无论有多亲密——总是要睡觉的，他们也不可能对一滩烂泥感同身受。父母亲人更加不可能。我的烂泥状态，我的恐慌，终究只能由我自己承受或者解决。&lt;/p&gt;

&lt;p&gt;就是这种时候，我重新捡起了写作。&lt;/p&gt;

&lt;p&gt;选在一个没人认识的博客网站，放弃社交性，放弃身份限制，只就自己想谈的话题去写。一篇文章写到大半，身体疲惫和倾诉过后的清爽终于能够压过恐慌之后，我得以入眠。&lt;/p&gt;

&lt;p&gt;回头考古，才发现自己从大二下开始写，到大四结束封笔，竟然在那里发布了总计79篇文章。&lt;/p&gt;

&lt;p&gt;第一篇文章是参加博客网站的话题，写了写大学开始困扰自己的疾病。那是我第一次那样——只为了内容、只为了自己——写文章，也是我第一次真正去谈自己的疾病：平山病，自限性肌肉萎缩。并不严重，跟ALS这种杀人越货的家伙比，简直算得上是仁慈。所以长久以来，环境——甚至我自己——也都一直期望，它不会对我的生活带来多少影响。但即便是仁慈得跟被蚊子叮咬差不多，它所带来的影响终究还是存在的，压抑得久了，而不见自己被正视或释放，它就会以种种更细微，但更加扭曲的方式干扰你。&lt;/p&gt;

&lt;p&gt;我很庆幸自己参加了那个话题活动。虽然仍然放得不是太开：即使在一个没有人认识、没有人关心我的地方，我仍然纠结着自己并不存在的面子，纠结于文章必须有一个阳光的主题种种。但总归是把自己对它的想法放在台面上厘了一遍，并且释放了出来。这样做帮助很大。&lt;/p&gt;

&lt;p&gt;在那时候，我还没意识到它有多么重要。那时候的我，觉得自己对人间百态大多都看得明白。我并没能意识到，这种明白仅仅是我浅尝辄止的思考带来的一种错觉。&lt;/p&gt;

&lt;p&gt;人的思路，如果完全停留在脑海里，可以称得上是没有思路。停留在脑海里的思路，互相交织，揉成一团，不断变动——这种高度相关、高度可变的特性，固然是人类思维称得上闪光的地方，但同时也是它们无法逾越的形态界限。只有把它们固定成为书面语言记录下来，你才能得以从前、向后把它厘直，并去检验它究竟能否构成一条真正没有断点的“道路”。内容写作的重要作用之一，就是给人提供一个这样的厘直台。&lt;/p&gt;

&lt;p&gt;后来陆陆续续写了更多文章。从谈微博取关，到谈信仰，到读书笔记，甚至小说——一篇借鉴her和黑镜里人工智能的短篇，我现在看竟然觉得还不错。当然了，也有我觉得写得不好的文章。有一些甚至都称不上真诚。但至少比我高中那会儿回看初中空间日志的时候感觉好多了。我对不真诚感到羞耻，但尚不觉得有删除的必要。 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:Aaron-Swartz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:Aaron-Swartz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;不真诚的来源也可以说一说。很意外地，我写的东西竟然有网友点赞。当时沾沾自喜的我，在自己其它社交平台转发了博客里的一些文章。现实生活中的熟人(包括父母)涌入后，我在现实中的身份和认同焦虑随之一同涌入，开始反过来渗透写作本身。其所导致的不诚实，除了反映出我对现实问题的逃避，还有一层更加严重的对我道德的暗示，即我无法做到言行一致。&lt;/p&gt;

&lt;p&gt;我能感受到这些对写作的影响。要求主题健康的应试作文无法出现真正好的文章，正是因为脱离了真诚。这里也是一样的，如果文字成为一种借口，脱离了真诚，那所成的文章自然也不可能跟好挂钩。&lt;/p&gt;

&lt;p&gt;另外一方面，在某个时间点，我读了一个外号特师的豆瓣作者所写的一些文章。我不可回避的意识到，自己这种不够真诚的写作，正好处于它解构大锤的某个受击范围之内。被击中之后我更是元气大减，无法再像以前那样写作了。&lt;/p&gt;

&lt;p&gt;一旦脱离真诚，就像做了贼一样，在遇见到自己会被解构大锤砸中之后，首先想的不是乖乖自首，而是选择逃得更远。我试图把自己的真实和对期望现实的谎言藏在所谓“小说”的伟大虚构大旗之下，试图用这种冠冕堂皇的方式来正当化自己的虚伪。我的小说甚至想要模仿特师的某些文风。&lt;/p&gt;

&lt;p&gt;尚不说产物的质量如何，一个可见的后果，是写作热情的下降。无法真诚、无法摆脱解构之锤之后，写作里它厘直台的作用越来越远，渐渐单纯地变为我失眠或者恐慌时的发泄手段。当我发现自己只能重复之前说过的话，而且博客热度本身也下降到基本没有之后，我最后选择了退出。&lt;/p&gt;

&lt;p&gt;那是两年前。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;时间过的真的很快。转眼两年过去，我参与工作也有一年了。一开始在上海，今年年初辗转到深圳。&lt;/p&gt;

&lt;p&gt;参与工作的这段时间，繁忙让我有借口假装麻木，但我还是会恐慌，会失眠。问题在于，我没有时间去学习或者写作了：在大学里，我有足够多的时间去发呆，看肥皂剧，玩游戏种种，但剩下的时间仍然有空隙去阅读、思考。但工作挤压了我发呆的时间，发呆的时间转而&amp;hellip;&lt;/p&gt;

&lt;p&gt;但终究我还是没办法——也不能——成为一个完全麻木的人。发呆和业务代码绝对不能称为我生活的全部。&lt;/p&gt;

&lt;p&gt;我在Github搭建这个博客，最初是想做技术写作，但没能坚持。现在我准备重启它。&lt;/p&gt;

&lt;p&gt;我仍然有很多思考需要厘直，还有更多思考尚待我去学习发现。我要重启这里，作为自己的厘直台，真诚地就一些自己感兴趣的话题做探讨。&lt;/p&gt;

&lt;p&gt;这是我现在写作的方向。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:-&#34;&gt;实际上，是不是真就不能呢？那时候我没有看到选择，很遗憾。 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:-&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:Aaron-Swartz&#34;&gt;比较意外的是，登上许久没有登陆的博客考古时，竟然发现站点管理员删了我的两篇老文章，一篇是Aaron Swartz的纪录片观后感，里面提到了对意识形态和国家宣传机器的怀疑，另外一篇是关于射手网被封停的抱怨。几年之后才屏蔽，也从侧面反映了近来中文互联网舆论封紧的趋势。 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:Aaron-Swartz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>BECK</title>
      <link>https://daseinphaos.github.io/post/beck/</link>
      <pubDate>Thu, 12 Jul 2018 21:37:27 +0800</pubDate>
      
      <guid>https://daseinphaos.github.io/post/beck/</guid>
      <description>&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=&#34;320&#34; height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=22793552&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;有这么一些动画，看过之后，会让我产生纠结。&lt;/p&gt;

&lt;p&gt;一方面是饱餐美食的心满意足，另外一方面则是一种更深的饥饿。一种懊恼。&lt;/p&gt;

&lt;p&gt;懊恼自己年轻的时候错过了它。如果是年轻的时候，看到它，我会是什么心情呢。我的人生轨迹又会发生什么变化呢。&lt;/p&gt;

&lt;p&gt;我不知道。一时间也难以想象。&lt;/p&gt;

&lt;p&gt;听一首歌吧，闷一口酒吧，唱出声来吧。&lt;/p&gt;

&lt;p&gt;讴歌青春！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一部童话</title>
      <link>https://daseinphaos.github.io/post/meidoragunn/</link>
      <pubDate>Sat, 08 Apr 2017 19:34:18 +0000</pubDate>
      
      <guid>https://daseinphaos.github.io/post/meidoragunn/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;现实世界很操蛋的，冲突——个人的到集体的，无伤大雅的到惨绝人寰的——一直都在发生。更加糟糕的是，对于其中的某些冲突，即便聚集了人类社会里的尖端人才，采用了人类智慧的最新结晶；都不一定能够得到解决。而我们每一个个体，仅作为一个个无能的凡人，只有承受一条路可走。&lt;/p&gt;

&lt;p&gt;这就是为什么我们需要童话——一种“通过丰富的想象、幻想和夸张来编写适合于儿童欣赏的故事”&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;的文学体裁。&lt;/p&gt;

&lt;p&gt;对于某些问题，多数普通人所具备的认知，并不比一般意义上的儿童认知更加丰富。对于这些问题，我们需要童话。在架空的幻想里去谈论它们，相比于基于现实生活的论述——往往已被问题精英们进行至焦头烂额却仍无建树；无论对于作者还是读者来说，都是一件更加舒适、更易实施的行动。&lt;/p&gt;

&lt;p&gt;批评家大可认为此类作品避重就轻，毫无“意义”。从某种角度来说，他们没错。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;但童话之所以被称为童话——而非什么“最佳指南”——其原因也正在于此：它们并不声称自己要去阐述或解决实际问题，而是就这些问题给“儿童”们提供一点引导材料，和一点希望，仅此而已。&lt;/p&gt;

&lt;p&gt;龙女仆就是这样的一部童话。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;《现代汉语词典（第6版）》，2012，商务印书馆
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;批评家们也可以批评说,&lt;em&gt;一切&lt;/em&gt; 声明从 &lt;em&gt;某种&lt;/em&gt; 角度来说都是对的。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://daseinphaos.github.io/about/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daseinphaos.github.io/about/</guid>
      <description>&lt;p&gt;This is the personal blog of Luxko, a game developer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Closure, Lifetime, and HRT</title>
      <link>https://daseinphaos.github.io/post/closure-lifetime-hrt/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daseinphaos.github.io/post/closure-lifetime-hrt/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;So here is the thing. Can we write something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut vector = vec![1, 2, 3];
let mut closure = |x| vector.get_mut(x);
println!(&amp;quot;{:?}&amp;quot;, closure(2));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in Rust?&lt;/p&gt;

&lt;p&gt;The answer is, unfortunately, no.&lt;/p&gt;

&lt;p&gt;Compiling it as of &lt;code&gt;rust 1.15.1&lt;/code&gt; would yield some error message like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements
   --&amp;gt; src\main.rs:100:23
    |
100 |     let closure = |x| vector.get_mut(x);
    |                       ^^^^^^
    |
note: first, the lifetime cannot outlive the lifetime  as defined on the body at 100:22...
   --&amp;gt; src\main.rs:100:23
    |
100 |     let closure = |x| vector.get_mut(x);
    |                       ^^^^^^^^^^^^^^^^^
note: ...so that closure can access `vector`
   --&amp;gt; src\main.rs:100:23
    |
100 |     let closure = |x| vector.get_mut(x);
    |                       ^^^^^^
note: but, the lifetime must be valid for the scope of call-site for function at 100:22...
   --&amp;gt; src\main.rs:100:23
    |
100 |     let closure = |x| vector.get_mut(x);
    |                       ^^^^^^^^^^^^^^^^^
note: ...so that return value is valid for the call
   --&amp;gt; src\main.rs:100:19
    |
100 |     let closure = |x| vector.get_mut(x);
    |                   ^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One got to admit that such an error message is nowhere near helpful. So let&amp;rsquo;s try to figure out what&amp;rsquo;s &lt;em&gt;really&lt;/em&gt; going on here on our own.&lt;/p&gt;

&lt;p&gt;Back to the original closure. The intention was quiet simple: we wanted the closure to capture the &lt;code&gt;vector&lt;/code&gt; in its environment. Upon subsequent invocations to the closure, a mutable reference to an element of the captured &lt;code&gt;vector&lt;/code&gt; would be returned. Nothing fancy, just a tiny bit of a wrapper of the &lt;code&gt;get_mut&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;However, to our surprise, such a tiny code snippet failed the borrow checker, leaving us some mysterious error message.&lt;/p&gt;

&lt;p&gt;To solve the mystery, let&amp;rsquo;s try to implement such a closure struct by hand - closure by itself is already mysterious enough, maybe we can figure this out if we get that mess cleared out of the picture.&lt;/p&gt;

&lt;p&gt;So, a trip into manually implementing closures&amp;hellip;&lt;/p&gt;

&lt;p&gt;First thing first, let&amp;rsquo;s try to define how our &lt;code&gt;Closure&lt;/code&gt; would layout.&lt;/p&gt;

&lt;p&gt;As a simple glimpse, we&amp;rsquo;d like the closure to be able to return a mutable reference into its captured &lt;code&gt;vector&lt;/code&gt;. As such, at the minimum, the &lt;code&gt;Closure&lt;/code&gt; struct should also take such a mutable reference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Closure&amp;lt;&#39;a&amp;gt; {
    inner: &amp;amp;&#39;a mut Vec&amp;lt;i32&amp;gt;, // Assuming `i32` for simplicity
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let&amp;rsquo;s try adding function-like behavior for our struct. To achieve this we would have to implement &lt;code&gt;FnMut&lt;/code&gt;: we wanted the closure to be reusable (once the last returned borrow gets out of scope), thus it can&amp;rsquo;t simply be an one-off shot. However, due to the current definition of the &lt;code&gt;Fn&lt;/code&gt;-series of traits, implementing &lt;code&gt;FnMut&lt;/code&gt; would also require the &lt;code&gt;FnOnce&lt;/code&gt; trait to be implemented. Also, we have to pack the input parameters into a tuple ( even if under our cases there is only one input parameter). Anyway, let&amp;rsquo;s just get the &lt;code&gt;FnOnce&lt;/code&gt; done first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Requeried as custom-implementing `Fn`s is unstable for now
#![feature(unboxed_closures)]
#![feature(fn_traits)]

// struct definition here...

impl&amp;lt;&#39;a&amp;gt; FnOnce&amp;lt;(usize,)&amp;gt; for Closure&amp;lt;&#39;a&amp;gt; {
    // directy returning reference rather than `Option` for simplicity
    type Output = &amp;amp;&#39;a mut i32;

    extern &amp;quot;rust-call&amp;quot; 
    fn call_once(self, (i,): (usize, )) -&amp;gt; &amp;amp;&#39;a mut i32 {
        self.inner.get_mut(i).unwrap()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so good. Now let&amp;rsquo;s try to implement &lt;code&gt;FnMut&lt;/code&gt; as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// ...

impl&amp;lt;&#39;a&amp;gt; FnMut&amp;lt;(usize,)&amp;gt; for Closure&amp;lt;&#39;a&amp;gt; {
    extern &amp;quot;rust-call&amp;quot;
    fn call_mut(&amp;amp;mut self, (i,): (usize, )) -&amp;gt; &amp;amp;&#39;a mut i32 {
        self.inner.get_mut(i).unwrap()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Now here is that error once again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements
   --&amp;gt; src\main.rs:120:9
    |
120 |         self.inner.get_mut(i).unwrap()
    |         ^^^^^^^^^^
    |
note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 119:59...
   --&amp;gt; src\main.rs:119:60
    |
119 |       fn call_mut(&amp;amp;mut self, (i,): (usize, )) -&amp;gt; &amp;amp;&#39;a mut i32 {
    |  ____________________________________________________________^ starting here...
120 | |         self.inner.get_mut(i).unwrap()
121 | |     }
    | |_____^ ...ending here
note: ...so that reference does not outlive borrowed content
   --&amp;gt; src\main.rs:120:9
    |
120 |         self.inner.get_mut(i).unwrap()
    |         ^^^^^^^^^^
note: but, the lifetime must be valid for the lifetime &#39;a as defined on the body at 119:59...
   --&amp;gt; src\main.rs:119:60
    |
119 |       fn call_mut(&amp;amp;mut self, (i,): (usize, )) -&amp;gt; &amp;amp;&#39;a mut i32 {
    |  ____________________________________________________________^ starting here...
120 | |         self.inner.get_mut(i).unwrap()
121 | |     }
    | |_____^ ...ending here
note: ...so that reference does not outlive borrowed content
   --&amp;gt; src\main.rs:120:9
    |
120 |         self.inner.get_mut(i).unwrap()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this time, one might reasonably argue that the error message is indeed helpful.&lt;/p&gt;

&lt;p&gt;It turns out that, returning &lt;code&gt;&amp;amp;&#39;a mut i32&lt;/code&gt; is not feasible for the shorter-live invocation of &lt;code&gt;call_mut&lt;/code&gt;. What we&amp;rsquo;ve really wanted for the return type of &lt;code&gt;call_mut&lt;/code&gt;, was something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// ...

impl&amp;lt;&#39;a&amp;gt; FnMut&amp;lt;(usize,)&amp;gt; for Closure&amp;lt;&#39;a&amp;gt; {
    extern &amp;quot;rust-call&amp;quot;
    fn&amp;lt;&#39;b&amp;gt; call_mut(&amp;amp;&#39;b mut self, (i,): (usize, )) -&amp;gt; &amp;amp;&#39;b mut i32 {
        self.inner.get_mut(i).unwrap()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, we want the returned reference to live only as long as the invocation scope of &lt;code&gt;call_mut&lt;/code&gt; ( i.e. &lt;code&gt;&#39;b&lt;/code&gt;), nothing more. Certainly not the entire scope of the &lt;code&gt;Closure&lt;/code&gt; ( i.e. &lt;code&gt;&#39;a&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now clearly the code above won&amp;rsquo;t compile either.&lt;/p&gt;

&lt;p&gt;For one thing, we can&amp;rsquo;t &amp;ldquo;generically&amp;rdquo; implement a trait method across what it&amp;rsquo;d otherwise not; for the other, even if we can, to maintain the subtype-invariance of &lt;code&gt;type Output&lt;/code&gt; (note that &lt;code&gt;FnOnce&lt;/code&gt; and &lt;code&gt;FnMut&lt;/code&gt; shares the same output type, which I think is fairly reasonable), &lt;code&gt;&#39;b&lt;/code&gt; would &lt;em&gt;have&lt;/em&gt; to a subtype of &lt;code&gt;&#39;a&lt;/code&gt; (i.e. it have to outlive &lt;code&gt;&#39;a&lt;/code&gt;, or at least live as long), which makes the method totally useless for us.&lt;/p&gt;

&lt;p&gt;So is there anyway that we can actually solve this?&lt;/p&gt;

&lt;p&gt;Intuitively, one might think that generics can help us out here. If we could make a generic &lt;code&gt;impl&lt;/code&gt; of &lt;code&gt;FnMut&lt;/code&gt; (thus &lt;code&gt;FnOnce&lt;/code&gt; as well) over all possible lifetimes &lt;code&gt;&#39;b&lt;/code&gt;&amp;hellip; Ok, that&amp;rsquo;s apparently impossible either, as &lt;code&gt;type Output&lt;/code&gt; is an associate type rather than an input type.&lt;/p&gt;

&lt;p&gt;For me, I see only one way out, that is, the introducing of higher ranked types (HRT).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;more to come&amp;hellip;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>